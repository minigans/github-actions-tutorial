name: Build and publish image to artifact repo

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: gcpmini-chapter1
  GAR_LOCATION: us-central1
  REPOSITORY: mini-helm-repo
  IMAGE: static-site
  CLUSTER_NAME: minigans1

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  setup-build-publish-deploy:
    name: Setup, Build and Publish
    runs-on: ubuntu-latest
    environment: dev

    steps:
      # Check out the source code
      - name: Checkout
        uses: actions/checkout@v2

      # Configure Workload Identity Federation and generate an access token
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/1069459191638/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
          service_account: 'my-service-account@gcpmini-chapter1.iam.gserviceaccount.com'

      # Login to Artifact registry
      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" .

      # Push the Docker image to Google Artifact Registry
      - name: Publish
        run: |-
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"

      # Check for tools in the Ubuntu image
      - name: Check for Google Cloud SDK
        run: |-
          gcloud --help | tee

      # Configure kube and check for Kube access
      - name: Check for Kube access
        run: |-
          gcloud container clusters get-credentials $CLUSTER_NAME \
              --region $GAR_LOCATION \
              --project $PROJECT_ID &&
          kubectl get nodes -o wide --show-labels
